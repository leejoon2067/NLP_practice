# -*- coding: utf-8 -*-
"""KoBERT 감정분류 모델.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14QyyqLv8vUo0ptOdvK7x9944ohiTgP4-

## 1. KoBert 모델 불러오기
"""

# SKTBrain/KoBert 모델 가져오기. https://github.com/SKTBrain/KoBERT/tree/master/kobert_hf 허깅페이스 업로드 버전
!pip install 'git+https://github.com/SKTBrain/KoBERT.git#egg=kobert_tokenizer&subdirectory=kobert_hf'

"""## 2. Colab 환경 설정"""

# Colab 환경 설정
!pip install gluonnlp pandas tqdm
!pip install mxnet

# 라이브러리 import
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import gluonnlp as nlp
import numpy as np
from tqdm import tqdm, tqdm_notebook
import pandas as pd

# https://stackoverflow.com/questions/74893742/how-to-solve-attributeerror-module-numpy-has-no-attribute-bool # bool 연산자 오류? 인 듯한데, 옆의 링크 참고해서 코드 수정해봤습니다.
import numpy as np
np.bool = np.bool_

# GPU 설정 (Colab T4 GPU)
device = torch.device("cuda:0")

"""## 3. 모델 설정

*  transformers :  BERTModel 의 pretrained_model 중 'skt/kobert-base-v1' 사용.
*  tokenizer : KoBERTTokenizer 의 pretrain_model 중 'skt/kobert-base-v1' 사용.




"""

# transformers 설정
from transformers import AdamW
from transformers.optimization import get_cosine_schedule_with_warmup

from transformers import BertModel
model = BertModel.from_pretrained('skt/kobert-base-v1')

# tokenizer 설정
from kobert_tokenizer import KoBERTTokenizer
tokenizer = KoBERTTokenizer.from_pretrained('skt/kobert-base-v1')

# tokenizer vocab 생성.
vocab = nlp.vocab.BERTVocab.from_sentencepiece(tokenizer.vocab_file, padding_token = '[PAD]')

"""## 4. 데이터 불러오기

*   AI Hub 감정분류데이터셋 사용.

"""

data = pd.read_csv("/content/감정분류데이터셋.csv", encoding = 'cp949')

data.head()

data.shape
# (19374, 15)

data['상황'].unique()
# array(['happiness', 'neutral', 'sadness', 'angry', 'surprise', 'disgust',
#      'fear'], dtype=object)

"""#### 4-1. 데이터 전처리"""

# 감정 데이터셋 내부 감정 label / '두려움', '놀람', '화남', '슬픔', '중립', '기쁨', '혐오' : 7개 감정 => 각각 0, 1, 2, 3, 4, 5, 6 에 대응
data.loc[(data['상황'] == 'fear'), '상황'] = 0
data.loc[(data['상황'] == 'surprise'), '상황'] = 1
data.loc[(data['상황'] == 'angry'), '상황'] = 2
data.loc[(data['상황'] == 'sadness'), '상황'] = 3
data.loc[(data['상황'] == 'neutral'), '상황'] = 4
data.loc[(data['상황'] == 'happiness'), '상황'] = 5
data.loc[(data['상황'] == 'disgust'), '상황'] = 6

data['상황'].unique()
# array([5, 4, 3, 2, 1, 6, 0], dtype=object)

data_list = []
for talk, label in zip (data['발화문'], data['상황']):
  temp = []
  temp.append(talk)
  temp.append(str(label))

  data_list.append(data)

print(data)
# ['걱정해줘서 고마워.', '6']

print(data_list[:4])
# ['헐! 나 이벤트에 당첨 됐어.', '5'], ['내가 좋아하는 인플루언서가 이벤트를 하더라고. 그래서 그냥 신청 한번 해봤지.', '5'], ['한 명 뽑는 거였는데, 그게 바로 내가 된 거야.', '5'], ['당연히 마음에 드는 선물이니깐, 이벤트에 내가 신청 한번 해본 거지. 비싼 거야. 그래서 못 산 향수야.', '5']]

"""#### 4-2. 데이터 분류 (학습, 테스트셋)"""

# train 데이터셋 / test 데이터셋 분류
from sklearn.model_selection import train_test_split
dataset_train, dataset_test = train_test_split(data_list, test_size = 0.2, shuffle = True, random_state = 32)

print(len(dataset_train), len(dataset_test))
# 15499 3875

"""#### 4-3. 데이터셋 Tokenize"""

tok = tokenizer.tokenize

# tokenization과 encoding, padding 작업 수행.

class BERTDataset(Dataset):
  def __init__(self, dataset, sent_idx, label_idx, bert_tokenizer, vocab, max_len, pad, pair):

    transform = nlp.data.BERTSentenceTransform(
        bert_tokenizer, max_seq_length = max_len, vocab = vocab, pad = pad, pair= pair)

    self.sentences = [transform([i[sent_idx]]) for i in dataset]
    self.labels = [np.int32(i[label_idx]) for i in dataset]

  def __getitem__(self, i):
    return (self.sentences[i] + (self.labels[i],))

  def __len__(self):
    return (len(self.labels))

"""#### 4-4. 파라미터 세팅"""

# parameter 설정. https://github.com/SKTBrain/KoBERT/blob/master/scripts/NSMC/naver_review_classifications_pytorch_kobert.ipynb 참고.
max_len = 64
batch_size = 64
warmup_ratio = 0.1
num_epochs = 5  # 1. gpu 가 없을 때 CPU 환경에서 epochs = 3으로 설정. / # 두 번째 테스트에서 T4 GPU 사용. epochs = 5 설정.
max_grad_norm = 1
log_interval = 200
learning_rate =  5e-5

"""#### 4-5. 데이터 인코딩, 패딩 작업


"""

# BERTDataset 함수에 train 데이터셋, test 데이터셋 입력. / 초기 입력값 : sent_idx = 0, label_idx = 1, bert_tokenizer = tok, vocab = vocab, max_len = max_len, pad = True, pair = False
data_train = BERTDataset(dataset_train, 0, 1, tok, vocab, max_len, True, False)
data_test = BERTDataset(dataset_test, 0, 1, tok, vocab, max_len, True, False)

# 데이터 로더 생성.
train_dataloader = torch.utils.data.DataLoader(data_train, batch_size=batch_size, num_workers=5)
test_dataloader = torch.utils.data.DataLoader(data_test, batch_size=batch_size, num_workers=5)

"""## 5. Bert 분류 모델 불러오기
*  https://github.com/SKTBrain/KoBERT/blob/master/scripts/NSMC/naver_review_classifications_pytorch_kobert.ipynb
참고


"""

class BERTClassifier(nn.Module):
  def __init__(self, bert, hidden_size = 768, num_classes = 7,
               dr_rate = None, params = None):
    super(BERTClassifier, self).__init__()
    self.bert = bert
    self.dr_rate = dr_rate

    self.classifier = nn.Linear(hidden_size, num_classes)
    if dr_rate:
      self.dropout = nn.Dropout(p = dr_rate)

  def gen_attention_mask(self, token_ids, valid_length):
    attention_mask = torch.zeros_like(token_ids)
    for i, v in enumerate(valid_length):
      attention_mask[i][:v] = 1
    return attention_mask.float()

  def forward(self, token_ids, valid_length, segment_ids):
    attention_mask = self.gen_attention_mask(token_ids, valid_length)

    _, pooler = self.bert(input_ids = token_ids, token_type_ids = segment_ids.long(),
                          attention_mask = attention_mask.float().to(token_ids.device), return_dict = False)
    if self.dr_rate:
      out = self.dropout(pooler)
    return self.classifier(out)

"""#### 5-1. Bert 모델 불러오기"""

bert_model = BERTClassifier(model, dr_rate = 0.5).to(device)

# optimizer , scheduler 설정.
no_decay = ['bias', 'LayerNorm.weight']
optimizer_grouped_parameters = [
    {'params' : [p for n, p in bert_model.named_parameters() if not any(nd in n for nd in no_decay)], 'weight_decay' : 0.01},
    {'params' : [p for n, p in bert_model.named_parameters() if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}
]

optimizer = AdamW(optimizer_grouped_parameters, lr = learning_rate)
loss_fn = nn.CrossEntropyLoss()

t_total = len(train_dataloader) * num_epochs
warmup_step = int(t_total * warmup_ratio)

scheduler = get_cosine_schedule_with_warmup(optimizer, num_warmup_steps = warmup_step, num_training_steps = t_total)

# 정확도 측정하는 calc_accuracy 함수 정의.
def calc_accuracy(X, Y):
  max_vals, max_indices = torch.max(X, 1)
  train_acc = (max_indices == Y).sum().data.cpu().numpy()/max_indices.size()[0]
  return train_acc
train_dataloader

"""## 6. 모델 학습"""

for e in range(num_epochs):
    train_acc = 0.0
    test_acc = 0.0
    bert_model.train()
    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(train_dataloader)):
        optimizer.zero_grad()
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)
        valid_length= valid_length
        label = label.long().to(device)
        out = bert_model(token_ids, valid_length, segment_ids)
        loss = loss_fn(out, label)
        loss.backward()
        torch.nn.utils.clip_grad_norm_(model.parameters(), max_grad_norm)
        optimizer.step()
        scheduler.step()  # Update learning rate schedule
        train_acc += calc_accuracy(out, label)
        if batch_id % log_interval == 0:
            print("epoch {} batch id {} loss {} train acc {}".format(e+1, batch_id+1, loss.data.cpu().numpy(), train_acc / (batch_id+1)))
    print("epoch {} train acc {}".format(e+1, train_acc / (batch_id+1)))
    bert_model.eval()
    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(test_dataloader)):
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)
        valid_length= valid_length
        label = label.long().to(device)
        out = bert_model(token_ids, valid_length, segment_ids)
        test_acc += calc_accuracy(out, label)
    print("epoch {} test acc {}".format(e+1, test_acc / (batch_id+1)))

"""## 7. 최종 Validation"""

def predict(predict_sentence): # input = 감정분류하고자 하는 sentence

    data = [predict_sentence, '0']
    dataset_another = [data]

    another_test = BERTDataset(dataset_another, 0, 1, tok, vocab, max_len, True, False) # 토큰화한 문장
    test_dataloader = torch.utils.data.DataLoader(another_test, batch_size = batch_size, num_workers = 5) # torch 형식 변환

    bert_model.eval()

    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(test_dataloader):
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)

        valid_length = valid_length
        label = label.long().to(device)

        out = bert_model(token_ids, valid_length, segment_ids)


        test_eval = []
        for i in out: # out = model(token_ids, valid_length, segment_ids)
            logits = i
            logits = logits.detach().cpu().numpy()

            if np.argmax(logits) == 0:
                test_eval.append("공포가")
            elif np.argmax(logits) == 1:
                test_eval.append("놀람이")
            elif np.argmax(logits) == 2:
                test_eval.append("분노가")
            elif np.argmax(logits) == 3:
                test_eval.append("슬픔이")
            elif np.argmax(logits) == 4:
                test_eval.append("중립이")
            elif np.argmax(logits) == 5:
                test_eval.append("행복이")
            elif np.argmax(logits) == 6:
                test_eval.append("혐오가")

        print(">> 입력하신 내용에서 " + test_eval[0] + " 느껴집니다.")

"""## BERT 감정 분류 모델 시현"""

# 질문에 0 입력 시 종료
end = 1
while end == 1 :
    sentence = input("하고싶은 말을 입력해주세요 : ")
    if sentence == "0" :
        break
    predict(sentence)
    print("\n")

